%{
#include "tcakmak-hw3.h"
#include "tcakmak-hw3.tab.h"
int nested = 0;
int lineCounter = 1; 
%}

tNEWLINE \n

tLOCALPART [A-Za-z0-9\-_]+(([A-Za-z0-9\-_]*|\.?)[A-Za-z0-9\-_])*
tDOMAIN [A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+|[A-Za-z0-9]{1}

/* Comments */
tSLC  "//" 
tOMLC "/\*" 
tCMLC "*/"   


%x singleLineComment multiLineComment
%%
{tSLC}  BEGIN(singleLineComment);
<singleLineComment>{tNEWLINE}    {lineCounter += 1; BEGIN(INITIAL);}
<singleLineComment>.    ;


{tOMLC} {BEGIN(multiLineComment); ++nested;}
<multiLineComment>{tCMLC}      { if (--nested == 0) BEGIN(INITIAL); }
<multiLineComment>{tOMLC}     ++nested;
<multiLineComment>{tNEWLINE}    {lineCounter += 1;} ;
<multiLineComment>.         ;

"Mail" return tMAIL;

"end"[ \t\n\r\f]+"Mail" {
	int length = strlen(yytext);
    	int i = 1;
    for(; i < length -1; i++){
        if (yytext[i] == '\n'){
            lineCounter += 1;
        }
    }
    
return tENDMAIL;}
    
"schedule" return tSCHEDULE;
"end"[ \t\n\r\f]+"schedule" {
	int length = strlen(yytext);
    	int i = 1;
    for(; i < length -1; i++){
        if (yytext[i] == '\n'){
            lineCounter += 1;
        }
    }
    
    return tENDSCHEDULE;}

"send" return  tSEND;
"set" return tSET;
"to" return tTO;
"from" return tFROM;
@ return tAT;
, return tCOMMA;
: return tCOLON;
\( return tLPR;
\) return tRPR;
\[ return tLBR;
\] return tRBR;
[a-zA-Z\_]+[a-zA-Z0-9\_]* {
    char *result = (char *)malloc(strlen(yytext));
    strcpy(result,yytext);
    yylval.infoNode.value = result;
    yylval.infoNode.lineNum = lineCounter;
    return tIDENT;
    }




["][^\"]*["] {
    int length = strlen(yytext);
    yylval.infoNode.lineNum = lineCounter;

    int i = 1;
    for(; i < length -1; i++){
        if (yytext[i] == '\n'){
            lineCounter += 1;
        }
    }
    char *result = (char *)malloc(strlen(yytext));
    strcpy(result,yytext);
    yylval.infoNode.value = result;
    return tSTRING;
  }


[0-9]{2}"/"[0-9]{2}"/"[0-9]{4}|[0-9]{2}\.[0-9]{2}\.[0-9]{4}|[0-9]{2}-[0-9]{2}-[0-9]{4} {
    
    char *result = (char *)malloc(strlen(yytext));
    strcpy(result,yytext);
    yylval.infoNode.value = result;
    yylval.infoNode.lineNum = lineCounter;
    
    return tDATE;}

[0-9]{2}:[0-9]{2} {
    
    char *result = (char *)malloc(strlen(yytext));
    strcpy(result,yytext);
    yylval.infoNode.value = result;
    yylval.infoNode.lineNum = lineCounter;
    
    return tTIME;}

{tLOCALPART}"@"({tDOMAIN}"."{tDOMAIN}"."{tDOMAIN}|{tDOMAIN}"."{tDOMAIN}) {

    char *result = (char *)malloc(strlen(yytext));
    strcpy(result,yytext);
    yylval.infoNode.value = result;
    yylval.infoNode.lineNum = lineCounter;

    return tADDRESS;
    
}

[ \t]+
{tNEWLINE}    {lineCounter += 1;}
.	    return yytext[0];
%%

